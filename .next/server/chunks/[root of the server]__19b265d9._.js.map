{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///home/emily/semanticode/src/lib/tempPages.ts"],"sourcesContent":["const pages: Record<string, string> = {};\n\nexport function saveTempPage(id: string, html: string) {\n  pages[id] = html;\n}\n\nexport function getTempPage(id: string): string | null {\n  return pages[id] || null;\n}\n\nexport function deleteTempPage(id: string) {\n  delete pages[id];\n}\n"],"names":[],"mappings":";;;;;AAAA,MAAM,QAAgC,CAAC;AAEhC,SAAS,aAAa,EAAU,EAAE,IAAY;IACnD,KAAK,CAAC,GAAG,GAAG;AACd;AAEO,SAAS,YAAY,EAAU;IACpC,OAAO,KAAK,CAAC,GAAG,IAAI;AACtB;AAEO,SAAS,eAAe,EAAU;IACvC,OAAO,KAAK,CAAC,GAAG;AAClB","debugId":null}},
    {"offset": {"line": 81, "column": 0}, "map": {"version":3,"sources":["file:///home/emily/semanticode/src/app/api/analyze/route.ts"],"sourcesContent":["import { NextResponse, NextRequest } from 'next/server';\nimport { deleteTempPage, getTempPage } from '@/lib/tempPages';\n\ntype AnalyzeResponse =\n  | { results: string }\n  | { error: string; details: string | ExecException };\n\nexport async function GET(req: NextRequest): Promise<NextResponse<AnalyzeResponse>> {\n  const id = req.nextUrl.searchParams.get('id');\n  const apiKey = process.env.API_KEY;\n\n  if (!id) {\n    return NextResponse.json(\n      { error: 'Missing \"id\" parameter', details: 'No ID provided in query.' },\n      { status: 400 }\n    );\n  }\n\n  try {\n    const html = getTempPage(id);\n\n    if (!html) {\n      return NextResponse.json(\n        { error: 'Page not found', details: 'No HTML found for the given ID.' },\n        { status: 404 }\n      );\n    }\n\n    console.log('no analyze o id Ã© esse', id)\n    const urlToAnalyze = `http://localhost:3000/api/preview/${id}`;\n\n    const apiUrl = `https://www.googleapis.com/pagespeedonline/v5/runPagespeed?url=${encodeURIComponent(\n      urlToAnalyze,\n    )}&category=ACCESSIBILITY&category=SEO&strategy=desktop&key=${apiKey}`;\n\n    const res = await fetch(apiUrl);\n    console.log(res)\n    const data = await res.json();\n\n    if (!res.ok) {\n      return NextResponse.json(\n        { error: 'Lighthouse API error', details: JSON.stringify(data) },\n        { status: 500 }\n      );\n    }\n\n    return NextResponse.json({ results: data }, { status: 200 });\n  } catch (err: any) {\n    return NextResponse.json(\n      { error: 'Unexpected error', details: err.message },\n      { status: 500 }\n    );\n  } finally {\n    deleteTempPage(id);\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAMO,eAAe,IAAI,GAAgB;IACxC,MAAM,KAAK,IAAI,OAAO,CAAC,YAAY,CAAC,GAAG,CAAC;IACxC,MAAM,SAAS,QAAQ,GAAG,CAAC,OAAO;IAElC,IAAI,CAAC,IAAI;QACP,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;YAA0B,SAAS;QAA2B,GACvE;YAAE,QAAQ;QAAI;IAElB;IAEA,IAAI;QACF,MAAM,OAAO,CAAA,GAAA,yHAAA,CAAA,cAAW,AAAD,EAAE;QAEzB,IAAI,CAAC,MAAM;YACT,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;gBAAkB,SAAS;YAAkC,GACtE;gBAAE,QAAQ;YAAI;QAElB;QAEA,QAAQ,GAAG,CAAC,0BAA0B;QACtC,MAAM,eAAe,CAAC,kCAAkC,EAAE,IAAI;QAE9D,MAAM,SAAS,CAAC,+DAA+D,EAAE,mBAC/E,cACA,0DAA0D,EAAE,QAAQ;QAEtE,MAAM,MAAM,MAAM,MAAM;QACxB,QAAQ,GAAG,CAAC;QACZ,MAAM,OAAO,MAAM,IAAI,IAAI;QAE3B,IAAI,CAAC,IAAI,EAAE,EAAE;YACX,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;gBAAwB,SAAS,KAAK,SAAS,CAAC;YAAM,GAC/D;gBAAE,QAAQ;YAAI;QAElB;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAAK,GAAG;YAAE,QAAQ;QAAI;IAC5D,EAAE,OAAO,KAAU;QACjB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;YAAoB,SAAS,IAAI,OAAO;QAAC,GAClD;YAAE,QAAQ;QAAI;IAElB,SAAU;QACR,CAAA,GAAA,yHAAA,CAAA,iBAAc,AAAD,EAAE;IACjB;AACF","debugId":null}}]
}